name: Scheduled Build and Caching Workflow ðŸš€

on:
  schedule:
    # This cron job runs at 00:00 AM UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual run'

jobs:
  build-cache-images:
    name: 'Build and Cache docker images'
    runs-on: ubuntu-latest                # This job will run on the latest available Ubuntu runner.

    # Permissions for the GitHub token that the workflow uses to interact with repository contents and GitHub packages.
    permissions:
      contents: read                      # Read access to the repository contents.
      packages: write                     # Write access to publish the Docker image to the registry.
      attestations: write                 # Permission for signing artifacts (if required).
      id-token: write                     # Token needed for OIDC authentication (for future use if needed, using ECR).

    steps:
      # Step 1: Checkout the appropriate branch (for PRs or merges).
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Capture the correct commit SHA.
      - name: Set SHA
        id: git_sha
        run: |
            # Use the latest commit SHA (merge commit) if the event is a push to main.
            echo "gitsha=${{ github.sha }}" >> $GITHUB_OUTPUT

      # Step 3: Set up Docker Buildx.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Cache Docker build layers to speed up the build process.
      - name: APP::Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-app
          key: ${{ runner.os }}-buildx-app-${{ steps.git_sha.outputs.gitsha }} # Unique key based on OS and commit SHA.
          restore-keys: |
            ${{ runner.os }}-buildx-app-

      # Step 5: Build the Docker image to be cached for future use.
      - name: APP::Build Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false  # No need to push the image, we just need this to create the cache.
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git_sha.outputs.gitsha }}
          cache-from: type=local,src=/tmp/.buildx-cache-app  # Reuse cached layers from previous builds.
          cache-to: type=local,dest=/tmp/.buildx-cache-app-new,mode=max  # Save new cache layers after the build.

      # Step 6: Move the newly generated cache to the main cache directory for future reuse.
      - name: APP::Move cache
        run: |
          rm -rf /tmp/.buildx-cache-app         # Remove the old cache.
          mv /tmp/.buildx-cache-app-new /tmp/.buildx-cache-app  # Move the new cache to replace the old cache.
