#
name: Create and publish a Docker image

# Triggers the workflow for both pull request events and merge into 'main'.
on:
  pull_request:
    branches:
      - main  # Trigger when a pull request targets the 'main' branch.
    types:
      - opened         # Trigger when a pull request is opened.
      - synchronize    # Trigger when commits are added or updated in the PR.
  push:
    branches:
      - main  # Trigger when a push (merge) happens on the 'main' branch.

# Define environment variables used across the workflow.
env:
  REGISTRY: ghcr.io                        # The container registry domain (GitHub Container Registry).
  IMAGE_NAME: ${{ github.repository }}     # Name of the image being built, based on the repository name.

# Defines the job for building and pushing the Docker image.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest                # This job will run on the latest available Ubuntu runner.

    # Permissions for the GitHub token that the workflow uses to interact with repository contents and GitHub packages.
    permissions:
      contents: read                      # Read access to the repository contents.
      packages: write                     # Write access to publish the Docker image to the registry.
      attestations: write                 # Permission for signing artifacts (if required).
      id-token: write                     # Token needed for OIDC authentication (for future use if needed).

    steps:
      # Step 1: Checkout the appropriate branch (for PRs or merges).
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Capture the correct commit SHA.
      - name: Set SHA
        id: git_sha
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use the PR head commit SHA if the event is a pull request.
            echo "gitsha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          else
            # Use the latest commit SHA (merge commit) if the event is a push to main.
            echo "gitsha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      # Step 3: Log in to GitHub Container Registry using the GitHub Actions-provided token.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Set up Docker Buildx for multi-platform builds.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Cache Docker build layers to speed up the build process.
      - name: APP::Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-app
          key: ${{ runner.os }}-buildx-app-${{ steps.git_sha.outputs.gitsha }} # Unique key based on OS and commit SHA.
          restore-keys: |
            ${{ runner.os }}-buildx-app-

      # Step 6: Build and push the Docker image to the GitHub Container Registry.
      - name: APP::Build Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git_sha.outputs.gitsha }}
          cache-from: type=local,src=/tmp/.buildx-cache-app  # Reuse cached layers from previous builds.
          cache-to: type=local,dest=/tmp/.buildx-cache-app-new,mode=max  # Save new cache layers after the build.

      # Step 7: Move the newly generated cache to the main cache directory for future reuse.
      - name: APP::Move cache
        run: |
          rm -rf /tmp/.buildx-cache-app         # Remove the old cache.
          mv /tmp/.buildx-cache-app-new /tmp/.buildx-cache-app  # Move the new cache to replace the old cache.

      # Step 8: Conditional cache clearing on merge into 'main'.
      - name: Clear branch cache after merge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Install gh-actions-cache extension
          gh extension install actions/gh-actions-cache

          # List caches for the PR branch
          CACHES=$(gh actions-cache list --branch refs/pull/${{ github.event.pull_request.number }}/merge --limit 100 | awk '{print $1}')
          
          # Delete the caches
          for cache in $CACHES; do
            gh actions-cache delete $cache --confirm
          done
